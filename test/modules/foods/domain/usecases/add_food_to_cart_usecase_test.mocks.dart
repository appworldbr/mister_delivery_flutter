// Mocks generated by Mockito 5.0.7 from annotations
// in mister_delivery_flutter/test/modules/foods/domain/usecases/add_food_to_cart_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mister_delivery_flutter/app/modules/foods/domain/entities/request/cart_extra_entity.dart'
    as _i4;
import 'package:mister_delivery_flutter/app/modules/foods/domain/entities/request/cart_food_entity.dart'
    as _i3;
import 'package:mister_delivery_flutter/app/modules/foods/domain/errors/errors.dart'
    as _i7;
import 'package:mister_delivery_flutter/app/modules/foods/domain/repositories/add_food_to_cart_repository.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [CartFoodEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartFoodEntity extends _i1.Mock implements _i3.CartFoodEntity {
  MockCartFoodEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  int get quantity =>
      (super.noSuchMethod(Invocation.getter(#quantity), returnValue: 0) as int);
  @override
  List<_i4.CartExtraEntity> get extras =>
      (super.noSuchMethod(Invocation.getter(#extras),
          returnValue: <_i4.CartExtraEntity>[]) as List<_i4.CartExtraEntity>);
  @override
  String get observation =>
      (super.noSuchMethod(Invocation.getter(#observation), returnValue: '')
          as String);
}

/// A class which mocks [IAddFoodToCartRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAddFoodToCartRepository extends _i1.Mock
    implements _i5.IAddFoodToCartRepository {
  MockIAddFoodToCartRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.FailureFood, bool>> addFoodToCart(
          _i3.CartFoodEntity? food) =>
      (super.noSuchMethod(Invocation.method(#addFoodToCart, [food]),
              returnValue: Future<_i2.Either<_i7.FailureFood, bool>>.value(
                  _FakeEither<_i7.FailureFood, bool>()))
          as _i6.Future<_i2.Either<_i7.FailureFood, bool>>);
}
